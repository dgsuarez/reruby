#! /usr/bin/env ruby

require 'thor'

require 'reruby'

class RerubyCLI < Thor

  def self.exit_on_failure?
    true
  end

  class_option :location, type: 'boolean', aliases: 'l'
  class_option :verbose, type: 'boolean', aliases: 'v'
  class_option :"ignore-paths", type: 'array'
  class_option :"ruby-extensions", type: 'array'
  class_option :"config-file", type: 'string'
  class_option :report, type: 'string'
  class_option :autocommit, type: 'boolean'
  class_option :"autocommit-message", type: 'string'

  desc 'rename_const From::Some::OldName NewName', 'Rename a const'

  def rename_const(from, to)
    from = force_namespace(from)
    refactor = Reruby::RenameConst.new(
      from: from,
      to: to,
      config: prepare_config
    )
    refactor.perform
  end

  desc 'extract_method path:start_line:start_col:end_line:end_col new_method_name',
       'Extract a method from a source location'
  method_option :'rubocop-autofix', type: 'boolean'
  method_option :'keyword-arguments', type: 'boolean'

  def extract_method(location, name)
    refactor = Reruby::ExtractMethod.new(
      name: name,
      location: location,
      config: prepare_config
    )
    refactor.perform
  end

  desc 'explode_namespace Class::With::Inline::Classes', 'Explode a namespace'

  def explode_namespace(namespace_to_explode)
    namespace_to_explode = force_namespace(namespace_to_explode)
    refactor = Reruby::ExplodeNamespace.new(
      namespace_to_explode: namespace_to_explode,
      config: prepare_config
    )
    refactor.perform
  end

  desc 'instances_to_readers From::Some::Const', 'Add and use attr_readers for instance variables'

  def instances_to_readers(namespace)
    namespace = force_namespace(namespace)
    refactor = Reruby::InstancesToReaders.new(
      namespace: namespace,
      config: prepare_config
    )
    refactor.perform
  end

  private

  def force_namespace(namespace_or_location)
    if options[:location]
      Reruby::SourceLocator.namespace_in_location(namespace_or_location).as_source
    else
      namespace_or_location
    end
  end

  def prepare_config
    config = Reruby::ConfigParser.new(cli_options: options).config
    Reruby::Log.instance.configure(config: config)
    config
  end

end

RerubyCLI.start(ARGV)
